rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========== HELPER FUNCTIONS ==========
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      let adminPath = /databases/$(database)/documents/admins/$(request.auth.uid);
      return isAuthenticated() && exists(adminPath) && get(adminPath).data.isActive == true;
    }
    
    function isDeliveryPartner() {
      let deliveryPath = /databases/$(database)/documents/delivery/$(request.auth.uid);
      return isAuthenticated() && exists(deliveryPath) && get(deliveryPath).data.isActive == true;
    }
    
    function isWorkshopWorker() {
      let workshopPath = /databases/$(database)/documents/workshop_workers/$(request.auth.uid);
      return isAuthenticated() && exists(workshopPath) && get(workshopPath).data.isActive == true;
    }
    
    // Enhanced validation function for notifications
    function isValidNotificationCreate() {
      let requiredFields = ['title', 'body', 'type'];
      let validTypes = ['new_order', 'order_edit', 'order_cancellation', 'status_change', 
                       'customer_registration', 'delivery_update', 'workshop_update'];
      
      return request.resource.data.keys().hasAll(requiredFields) &&
             validTypes.hasAny([request.resource.data.type]) &&
             request.resource.data.read == false &&
             request.resource.data.createdAt == request.time;
    }
    
    // Relaxed validation for admin-created notifications
    function isValidAdminNotificationCreate() {
      let requiredFields = ['title', 'body', 'type'];
      let validTypes = ['new_order', 'order_edit', 'order_cancellation', 'status_change', 
                       'customer_registration', 'delivery_update', 'workshop_update'];
      
      return request.resource.data.keys().hasAll(requiredFields) &&
             validTypes.hasAny([request.resource.data.type]) &&
             request.resource.data.read == false;
    }
    
    // ========== COLLECTION RULES ==========
    
    // ADMINS: Allow phone verification during login and notification access
    match /admins/{adminId} {
      allow read: if true;
      allow update: if isAdmin() || isOwner(adminId);
      allow create: if isOwner(adminId) || isAdmin();
      allow list: if true;
      allow delete: if isAdmin();
      
      // ADMIN NOTIFICATIONS SUBCOLLECTION
      match /notifications/{notificationId} {
        allow read, write: if isAdmin() && isOwner(adminId);
        allow read, list: if isAdmin();
        allow create: if isAuthenticated() && (isValidNotificationCreate() || (isAdmin() && isValidAdminNotificationCreate()));
        allow update: if isAdmin() && isOwner(adminId) && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      }
    }

    // DELIVERY PARTNERS: Admins create. Partners can link their profile once and then edit.
    match /delivery/{partnerId} {
      // TEMPORARY DEBUG: Allow all operations for authenticated users
      allow read, write: if isAuthenticated();
      allow read: if true;
      allow create, delete: if isAdmin();
      allow list: if isAuthenticated();
      
      // Enhanced delivery partner notifications rules
      match /notifications/{notificationId} {
        allow create: if isAdmin() || 
                     (isAuthenticated() && isValidNotificationCreate()) || 
                     (isWorkshopWorker() && isValidNotificationCreate());
        allow read, list: if isOwner(partnerId) || isAdmin();
        allow update: if isOwner(partnerId) && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      }
    }
    
    match /delivery_personnel/{partnerId} {
      allow read: if true;
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || 
                      isOwner(partnerId) ||
                      (isAuthenticated() && resource.data.uid == request.auth.uid);
      allow list: if isAuthenticated();
      
      // Enhanced delivery personnel notifications rules
      match /notifications/{notificationId} {
        allow create: if isAdmin() || 
                     (isAuthenticated() && isValidNotificationCreate()) || 
                     (isWorkshopWorker() && isValidNotificationCreate());
        allow read, list: if isOwner(partnerId) || isAdmin();
        allow update: if isOwner(partnerId) && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      }
    }
    
    // WORKSHOP WORKERS: Enhanced rules with notifications
    match /workshop_workers/{workerId} {
      allow read: if true;
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || 
                      isOwner(workerId) ||
                      (isAuthenticated() && resource.data.uid == request.auth.uid);
      allow list: if isAuthenticated();
      
      // Enhanced workshop worker notifications rules
      match /notifications/{notificationId} {
        allow create: if isAdmin() || 
                     (isAuthenticated() && isValidNotificationCreate()) || 
                     (isDeliveryPartner() && isValidNotificationCreate());
        allow read, list: if isOwner(workerId) || isAdmin();
        allow update: if isOwner(workerId) && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      }
    }
    
    // DELIVERY PHONE INDEX: For fast phone number lookup during login
    match /delivery_phone_index/{phoneKey} {
      // Allow admins to manage the phone index
      allow read, write: if isAdmin();
      
      // Allow anyone to read for phone verification during login
      // This is needed for delivery partners to login before they have a Firebase Auth UID
      allow read: if true;
      
      // Allow authenticated users to update their own linked records
      allow update: if isAuthenticated() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['linkedToUID', 'linkedAt']);
      
      // Allow listing for admin management
      allow list: if isAdmin();
    }
    
    // CUSTOMERS: Can create their own account and update their own data
    match /customer/{customerId} { 
      allow read, write: if isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == customerId;
      allow read, update: if isOwner(customerId);
      allow read: if isAuthenticated() && request.auth.uid == customerId;
      allow read: if isDeliveryPartner();
      allow list: if isAdmin() || isDeliveryPartner();
  
      match /addresses/{addressId} {
        allow read, write: if isAdmin();
        allow create, read, update, delete: if isOwner(customerId);
        allow read: if isDeliveryPartner();
        allow list: if isOwner(customerId) || isDeliveryPartner();
      }
    }
    
    // LEGACY: Support for users collection
    match /users/{userId} { 
      allow read, write: if isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow read, update: if isOwner(userId);
      allow read: if isDeliveryPartner();
      allow list: if isAdmin() || isDeliveryPartner();
      
      match /addresses/{addressId} {
        allow read, write: if isAdmin();
        allow create, read, update, delete: if isOwner(userId);
        allow read: if isDeliveryPartner();
        allow list: if isOwner(userId) || isDeliveryPartner();
      }
    }
    
    // ORDERS: Enhanced rules with notifications subcollection
    match /orders/{orderId} { 
      allow read, write: if isAdmin();
      allow create: if isAuthenticated() && request.resource.data.customerId == request.auth.uid;
      allow read: if isAuthenticated() && resource.data.customerId == request.auth.uid;
      allow read, list: if isDeliveryPartner() || isWorkshopWorker();
      allow list: if isAuthenticated();
      
      // Order notifications subcollection - Enhanced permissions
      match /notifications/{notificationId} {
        allow read: if isAdmin() || 
                   (isAuthenticated() && resource.data.forAdmin == false && 
                    get(/databases/$(database)/documents/orders/$(orderId)).data.customerId == request.auth.uid);
        allow create: if isAdmin() || 
                     (isAuthenticated() && isValidNotificationCreate()) ||
                     (isAuthenticated() && 
                      get(/databases/$(database)/documents/orders/$(orderId)).data.customerId == request.auth.uid &&
                      isValidNotificationCreate());
        allow update: if isAdmin() || 
                     (isAuthenticated() && 
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']));
      }
      
      // Customer update permissions
      allow update: if isAuthenticated() && 
        resource.data.customerId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'updatedAt', 'cancelReason', 'notificationSentToAdmin', 'notificationSentToDeliveryPerson']);
      
      allow update: if isAuthenticated() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['notificationSentToAdmin', 'notificationSentToDeliveryPerson', 'updatedAt']);
      
      allow update: if isAuthenticated() && 
        resource.data.customerId == request.auth.uid &&
        request.resource.data.status == 'cancelled' &&
        request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'cancelReason', 'updatedAt']);
      
      allow update: if isDeliveryPartner() && 
        request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'deliveryStatus', 'updatedAt', 'completedAt', 'deliveredAt', 'notificationSentToDeliveryPerson']);
      
      allow update: if isWorkshopWorker() && 
        request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'processingStatus', 'updatedAt', 'completedAt', 'processedAt', 'notificationSentToWorkshopWorker']);
    }
    
    // Customer Registration Notifications
    match /customerRegistrationNotifications/{notificationId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && (isValidNotificationCreate() || (isAdmin() && isValidAdminNotificationCreate()));
      allow update: if isAdmin();
    }
    
    // Quick Order Notifications with enhanced rules
    match /quickOrderNotifications/{notificationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isValidNotificationCreate() || (isAdmin() && isValidAdminNotificationCreate()));
      allow update: if isAdmin() || 
                   (isDeliveryPartner() && 
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']));
      allow delete: if isAdmin();
    }
    
    // Publicly readable collections
    match /items/{doc=**} { 
      allow read: if true; 
      allow write: if isAdmin(); 
    }
    
    match /banners/{doc=**} { 
      allow read: if true; 
      allow write: if isAdmin(); 
    }
    
    match /offers/{doc=**} { 
      allow read: if true; 
      allow write: if isAdmin(); 
    }
    
    match /notification/{doc=**} { 
      allow read: if true; 
      allow write: if isAdmin(); 
    }
    
    match /categories/{doc=**} { 
      allow read: if true; 
      allow write: if isAdmin(); 
    }
    
    match /settings/{doc=**} { 
      allow read: if true; 
      allow write: if isAdmin(); 
    }
    
    // FEEDBACK: Customers can create feedback, admins can manage all
    match /feedback/{feedbackId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow delete: if isAdmin();
      allow list: if isAdmin();
    }
    
    // FCM NOTIFICATIONS: For sending push notifications
    match /fcm_notifications/{notificationId} {
      // Allow authenticated users to create FCM notifications
      allow create: if isAuthenticated();
      
      // Allow admins to read and manage FCM notifications
      allow read, update, delete: if isAdmin();
      
      // Allow users to read their own FCM notifications
      allow read: if isAuthenticated() && 
                 resource.data.userId == request.auth.uid;
      
      // Allow admins to list all FCM notifications
      allow list: if isAdmin();
    }
    
    // ========== COLLECTION GROUP RULES ==========
    
    // NOTIFICATIONS COLLECTION GROUP: For admin panel to query all notifications
    match /{path=**}/notifications/{notificationId} {
      // Allow admins to read all notifications across all collections
      allow read, list: if isAdmin();
      
      // Allow customers to read their own notifications
      allow read: if isAuthenticated() && 
                 resource.data.forAdmin == false;
      
      // Allow admins to update read status of notifications
      allow update: if isAdmin() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      
      // Allow customers to update read status of their own notifications
      allow update: if isAuthenticated() && 
        resource.data.forAdmin == false &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
    }
  }
} 